name: 🚀 Ultimate Windows RDP via Ngrok (6 Hours, Admin Access)

on:
  workflow_dispatch:

jobs:
  RDP-Setup:
    runs-on: windows-latest
    timeout-minutes: 360  # Max GitHub Actions runtime

    steps:
    - name: 🧼 Enable RDP, Create Admin User, Configure Firewall
      shell: pwsh
      run: |
        Write-Host "🔧 Enabling Remote Desktop Protocol..."
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Write-Host "✅ RDP and firewall configured."

        Write-Host "🔐 Ensuring 'runneradmin' exists..."
        if (-not (Get-LocalUser -Name "runneradmin" -ErrorAction SilentlyContinue)) {
          net user runneradmin P@ssw0rd123 /add
          Write-Host "✅ User created."
        } else {
          Write-Host "ℹ️ User already exists."
        }

        Write-Host "🛡️ Adding 'runneradmin' to Administrators group..."
        $group = [ADSI]"WinNT://./Administrators,group"
        $memberPath = "WinNT://./runneradmin,user"
        $alreadyMember = $false
        foreach ($member in @($group.psbase.Invoke("Members"))) {
          if ($member.GetType().InvokeMember("Name", 'GetProperty', $null, $member, $null) -eq "runneradmin") {
            $alreadyMember = $true
            break
          }
        }
        if (-not $alreadyMember) {
          $group.Add($memberPath)
          Write-Host "✅ 'runneradmin' added to Administrators."
        } else {
          Write-Host "ℹ️ Already an admin."
        }

        Write-Host "🏁 User fully configured."

    - name: 🛠️ Download & Extract Ngrok
      shell: pwsh
      run: |
        $ngrokPath = "$env:USERPROFILE\ngrok"
        if (-not (Test-Path "$ngrokPath\ngrok.exe")) {
          Invoke-WebRequest -Uri "https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-stable-windows-amd64.zip" -OutFile "$env:USERPROFILE\ngrok.zip"
          Expand-Archive "$env:USERPROFILE\ngrok.zip" -DestinationPath "$ngrokPath"
          Write-Host "✅ Ngrok downloaded and extracted."
        } else {
          Write-Host "ℹ️ Ngrok already present."
        }

    - name: 🔐 Authenticate Ngrok Token
      shell: pwsh
      run: |
        & "$env:USERPROFILE\ngrok\ngrok.exe" authtoken "${{ secrets.NGROK_AUTH_TOKEN }}"
        Write-Host "✅ Ngrok authtoken applied."

    - name: 🚪 Start Ngrok TCP Tunnel (Port 3389)
      shell: pwsh
      run: |
        Start-Process -NoNewWindow -FilePath "$env:USERPROFILE\ngrok\ngrok.exe" -ArgumentList "tcp 3389"
        Start-Sleep -Seconds 10
        Write-Host "✅ Ngrok tunnel started."

    - name: 🌐 Retrieve Ngrok Public RDP Address (with retry)
      id: ngrok
      shell: pwsh
      run: |
        $maxRetries = 30
        $retryDelay = 5
        $addr = $null

        for ($i = 0; $i -lt $maxRetries; $i++) {
          try {
            $response = Invoke-RestMethod -Uri "http://127.0.0.1:4040/api/tunnels"
            $addr = $response.tunnels[0].public_url -replace "tcp://", ""
            echo "::set-output name=rdp::$addr"
            Write-Host "✅ Ngrok tunnel is ready: $addr"
            break
          } catch {
            Write-Host "⏳ Attempt $($i+1)/$maxRetries: Ngrok not ready. Retrying in $retryDelay seconds..."
            Start-Sleep -Seconds $retryDelay
          }
        }

        if (-not $addr) {
          throw "❌ Ngrok tunnel did not initialize in time."
        }

    - name: 🖥️ Display RDP Credentials
      shell: pwsh
      run: |
        Write-Host "📡 RDP Address: ${{ steps.ngrok.outputs.rdp }}"
        Write-Host "👤 Username: runneradmin"
        Write-Host "🔐 Password: P@ssw0rd123"
        Write-Host "⚠️ Please connect within a few minutes to avoid session timeout."

    - name: 🧩 (Optional) Install Extra Software
      shell: pwsh
      run: |
        # Uncomment below to install Chrome or VS Code if needed
        # iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
        # choco install googlechrome -y
        # choco install vscode -y
        Write-Host "🧩 Custom software installation placeholder (optional)."

    - name: 🧠 Prevent Idle Timeout (6 Hours)
      shell: pwsh
      run: |
        for ($i = 0; $i -lt 360; $i++) {
          Write-Host "🕒 Runner active: $i minutes elapsed."
          Start-Sleep -Seconds 60
        }
