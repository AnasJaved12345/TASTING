name: üöÄ Windows RDP via Ngrok (6 Hours)

on:
  workflow_dispatch:

jobs:
  RDP-Setup:
    runs-on: windows-latest
    timeout-minutes: 360

    steps:
    - name: üßº Enable RDP, Create Admin User, Open Firewall
      shell: pwsh
      run: |
        # Enable RDP
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name 'fDenyTSConnections' -Value 0
        Enable-NetFirewallRule -DisplayGroup 'Remote Desktop'

        # Create user if not exists
        if (-not (Get-LocalUser -Name 'runneradmin' -ErrorAction SilentlyContinue)) {
          net user runneradmin P@ssw0rd123 /add
        }

        # Add user to Administrators group
        $group = [ADSI]'WinNT://./Administrators,group'
        $user = 'WinNT://./runneradmin,user'
        if (-not ($group.PSBase.Invoke('Members') | ForEach-Object { $_.GetType().InvokeMember('Name', 'GetProperty', $null, $_, $null) } | Where-Object { $_ -eq 'runneradmin' })) {
          $group.Add($user)
        }

        Write-Host "‚úÖ RDP Enabled, Admin user ready, Firewall configured."

    - name: üîΩ Download & Setup Ngrok
      shell: pwsh
      run: |
        Invoke-WebRequest -Uri 'https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-stable-windows-amd64.zip' -OutFile "$env:USERPROFILE\ngrok.zip"
        Expand-Archive "$env:USERPROFILE\ngrok.zip" -DestinationPath "$env:USERPROFILE\ngrok"
        echo "‚úÖ Ngrok downloaded and extracted."

    - name: üîê Set Ngrok Auth Token
      shell: pwsh
      run: |
        & "$env:USERPROFILE\ngrok\ngrok.exe" authtoken "${{ secrets.NGROK_AUTH_TOKEN }}"
        echo "‚úÖ Ngrok authtoken configured."

    - name: üö™ Start Ngrok TCP Tunnel
      shell: pwsh
      run: |
        Start-Process -FilePath "$env:USERPROFILE\ngrok\ngrok.exe" -ArgumentList 'tcp 3389' -WindowStyle Hidden
        Start-Sleep -Seconds 10
        echo "‚úÖ Ngrok tunnel starting..."

    - name: üåê Retrieve Ngrok RDP Address
      id: get-ngrok
      shell: pwsh
      run: |
        $maxRetries = 60
        $retryDelay = 5
        $success = $false

        for ($i = 0; $i -lt $maxRetries; $i++) {
          try {
            $response = Invoke-RestMethod -Uri "http://127.0.0.1:4040/api/tunnels" -TimeoutSec 3
            if ($response.tunnels.Count -gt 0) {
              $url = $response.tunnels[0].public_url -replace 'tcp://', ''
              echo "::set-output name=rdp::$url"
              Write-Host "‚úÖ Ngrok tunnel available: $url"
              $success = $true
              break
            }
          } catch {
            Write-Host "‚è≥ Attempt $($i + 1)/$maxRetries: Ngrok not ready. Retrying in $retryDelay sec..."
            Start-Sleep -Seconds $retryDelay
          }
        }

        if (-not $success) {
          throw "‚ùå Ngrok tunnel failed after $($maxRetries * $retryDelay) seconds."
        }

    - name: üñ•Ô∏è Display RDP Credentials
      shell: pwsh
      run: |
        echo "üì° RDP Address: ${{ steps.get-ngrok.outputs.rdp }}"
        echo "üë§ Username: runneradmin"
        echo "üîê Password: P@ssw0rd123"

    - name: üíª Install Chrome / VS Code / Python / Java
      shell: pwsh
      run: |
        # Chrome
        Invoke-WebRequest "https://dl.google.com/chrome/install/375.126/chrome_installer.exe" -OutFile "$env:TEMP\chrome.exe"
        Start-Process "$env:TEMP\chrome.exe" -ArgumentList "/silent /install" -Wait

        # VS Code
        Invoke-WebRequest "https://update.code.visualstudio.com/latest/win32-x64-user/stable" -OutFile "$env:TEMP\vscode.exe"
        Start-Process "$env:TEMP\vscode.exe" -ArgumentList "/silent" -Wait

        # Python
        Invoke-WebRequest "https://www.python.org/ftp/python/3.12.2/python-3.12.2-amd64.exe" -OutFile "$env:TEMP\python.exe"
        Start-Process "$env:TEMP\python.exe" -ArgumentList "/quiet InstallAllUsers=1 PrependPath=1" -Wait

        # Java (Adoptium)
        Invoke-WebRequest "https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.10%2B7/OpenJDK17U-jdk_x64_windows_hotspot_17.0.10_7.msi" -OutFile "$env:TEMP\java.msi"
        Start-Process "msiexec.exe" -ArgumentList "/i `"$env:TEMP\java.msi`" /quiet" -Wait

        echo "‚úÖ Chrome, VS Code, Python, and Java installed."

    - name: üß† Keep Alive for 6 Hours
      shell: pwsh
      run: |
        for ($i = 0; $i -lt 360; $i++) {
          Write-Host "üïí Session active: $i minutes elapsed."
          Start-Sleep -Seconds 60
        }
